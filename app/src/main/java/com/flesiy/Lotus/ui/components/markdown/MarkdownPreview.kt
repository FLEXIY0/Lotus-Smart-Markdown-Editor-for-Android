package com.flesiy.Lotus.ui.components.markdown

import android.content.Context
import android.content.ContextWrapper
import android.text.Spannable
import android.text.method.LinkMovementMethod
import android.text.style.ClickableSpan
import android.text.style.ImageSpan
import android.view.View
import android.widget.TextView
import androidx.compose.animation.Crossfade
import androidx.compose.animation.core.tween
import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AttachFile
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import com.flesiy.Lotus.ui.components.CustomMarkdownEditor
import io.noties.markwon.Markwon
import io.noties.markwon.core.CorePlugin
import io.noties.markwon.ext.strikethrough.StrikethroughPlugin
import io.noties.markwon.ext.tables.TablePlugin
import io.noties.markwon.html.HtmlPlugin
import io.noties.markwon.image.coil.CoilImagesPlugin
import io.noties.markwon.linkify.LinkifyPlugin
import io.noties.markwon.AbstractMarkwonPlugin
import java.util.regex.Pattern
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.lifecycle.ViewModelProvider
import com.flesiy.Lotus.viewmodel.MainViewModel

@Composable
fun MarkdownPreviewScreen(
    content: String,
    isPreviewMode: Boolean,
    onContentChange: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    Box(modifier = modifier) {
        Crossfade(
            targetState = isPreviewMode,
            animationSpec = tween(durationMillis = 300),
            modifier = Modifier.fillMaxSize()
        ) { inPreviewMode ->
            if (inPreviewMode) {
                MarkdownPreview(
                    content = content,
                    onContentChange = onContentChange,
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                )
            } else {
                CustomMarkdownEditor(
                    value = content,
                    onValueChange = onContentChange,
                    modifier = Modifier.fillMaxSize()
                )
            }
        }
    }
}

class CheckboxPreProcessor : AbstractMarkwonPlugin() {
    companion object {
        private const val TAG = "CHECKBOX_DEBUG"
    }

    override fun processMarkdown(markdown: String): String {
        Log.d(TAG, "üî≤ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markdown —Ç–µ–∫—Å—Ç–∞")
        val pattern = Pattern.compile("^([ \\t]*- \\[([ xX])\\].*?)(?=\\n|$)", Pattern.MULTILINE)
        val matcher = pattern.matcher(markdown)
        val result = StringBuilder()
        var lastPosition = 0
        var checkboxCount = 0

        while (matcher.find()) {
            checkboxCount++
            val fullMatch = matcher.group(1) // –í—Å—è —Å—Ç—Ä–æ–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º
            val isChecked = matcher.group(2)?.trim()?.lowercase() == "x"
            val textAfterCheckbox = fullMatch?.substring(fullMatch.indexOf("]") + 1)?.trimStart() ?: ""
            
            Log.d(TAG, "üî≤ –ù–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å #$checkboxCount: ${matcher.group(0)}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${if (isChecked) "–æ—Ç–º–µ—á–µ–Ω" else "–Ω–µ –æ—Ç–º–µ—á–µ–Ω"}")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —á–µ–∫–±–æ–∫—Å–∞
            result.append(markdown.substring(lastPosition, matcher.start()))
            
            // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            result.append("![](file:///android_asset/checkbox_${if (isChecked) "checked" else "unchecked"}.png)")
            result.append(" ") // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —á–µ–∫–±–æ–∫—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
            result.append(textAfterCheckbox)
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!textAfterCheckbox.endsWith("\n")) {
                result.append("\n")
            }
            
            lastPosition = matcher.end()
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        result.append(markdown.substring(lastPosition))
        
        Log.d(TAG, "üî≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —á–µ–∫–±–æ–∫—Å–æ–≤: $checkboxCount")
        return result.toString()
    }
}

class CheckboxClickHandler(
    private val content: String,
    private val onContentChange: (String) -> Unit
) : LinkMovementMethod() {
    companion object {
        private const val TAG = "CHECKBOX_DEBUG"
    }

    private val checkboxPattern = Regex("^([ \\t]*- \\[([ xX])\\].*?)$", RegexOption.MULTILINE)
    private var checkboxes: List<CheckboxInfo>? = null

    private fun initCheckboxes() {
        if (checkboxes == null) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            val lines = content.split("\n")
            var currentPosition = 0
            
            checkboxes = mutableListOf<CheckboxInfo>().apply {
                lines.forEachIndexed { lineIndex, line ->
                    val match = checkboxPattern.find(line)
                    if (match != null) {
                        add(CheckboxInfo(
                            index = lineIndex,
                            start = currentPosition + match.range.first,
                            lineStart = currentPosition,
                            lineEnd = currentPosition + line.length,
                            text = match.value,
                            isChecked = match.groupValues[2].trim().lowercase() == "x"
                        ))
                    }
                    currentPosition += line.length + 1 // +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                }
            }
        }
    }

    override fun onTouchEvent(widget: TextView, buffer: Spannable, event: android.view.MotionEvent): Boolean {
        if (event.action != android.view.MotionEvent.ACTION_UP) {
            return super.onTouchEvent(widget, buffer, event)
        }

        val layout = widget.layout
        val x = event.x.toInt() - widget.totalPaddingLeft + widget.scrollX
        val y = event.y.toInt() - widget.totalPaddingTop + widget.scrollY
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
        val clickedLine = layout.getLineForVertical(y)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
        val lineLeft = layout.getLineLeft(clickedLine)
        val lineRight = layout.getLineRight(clickedLine)
        if (x < lineLeft || x > lineRight) {
            return super.onTouchEvent(widget, buffer, event)
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∫–ª–∏–∫–∞
        val offset = layout.getOffsetForHorizontal(clickedLine, x.toFloat())
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        initCheckboxes()
        
        // –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å, –≤ —Å—Ç—Ä–æ–∫–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –∫–ª–∏–∫
        val checkbox = checkboxes?.find { info ->
            offset >= info.lineStart && offset <= info.lineEnd
        } ?: return super.onTouchEvent(widget, buffer, event)

        Log.d(TAG, "üî≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å—É #${checkbox.index + 1}")
        Log.d(TAG, "üî≤ –¢–µ–∫—Å—Ç: ${checkbox.text}")
        Log.d(TAG, "üî≤ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${if (checkbox.isChecked) "–æ—Ç–º–µ—á–µ–Ω" else "–Ω–µ –æ—Ç–º–µ—á–µ–Ω"}")

        // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        val newContent = StringBuilder(content)
        val checkboxStart = checkbox.start + 3 // +3 —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–∏–º–≤–æ–ª –≤ —Å–∫–æ–±–∫–∞—Ö
        newContent.setCharAt(checkboxStart, if (checkbox.isChecked) ' ' else 'x')
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —á–µ–∫–±–æ–∫—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        checkboxes = null
        
        Log.d(TAG, "üî≤ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${if (!checkbox.isChecked) "–æ—Ç–º–µ—á–µ–Ω" else "–Ω–µ –æ—Ç–º–µ—á–µ–Ω"}")
        onContentChange(newContent.toString())
        return true
    }

    private data class CheckboxInfo(
        val index: Int,
        val start: Int,
        val lineStart: Int, // –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        val lineEnd: Int,   // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        val text: String,
        val isChecked: Boolean
    )
}

@Composable
fun MarkdownPreview(
    content: String,
    onContentChange: (String) -> Unit,
    modifier: Modifier = Modifier,
    fontSize: Float = 16f
) {
    val context = LocalContext.current
    val markwon = remember { createMarkwon(context) }

    Box(modifier = modifier) {
        AndroidView(
            modifier = Modifier.fillMaxWidth(),
            factory = { ctx ->
                createPreviewTextView(ctx, fontSize).apply {
                    movementMethod = CheckboxClickHandler(content, onContentChange)
                    markwon.setMarkdown(this, content)
                }
            },
            update = { textView ->
                textView.textSize = fontSize
                textView.movementMethod = CheckboxClickHandler(content, onContentChange)
                markwon.setMarkdown(textView, content)
            }
        )
    }
}

private fun createPreviewTextView(context: Context, fontSize: Float): TextView {
    return TextView(context).apply {
        textSize = fontSize
        setPadding(40, 16, 26, 16)
        setTextIsSelectable(true)
        gravity = android.view.Gravity.TOP
    }
}

private fun createMarkwon(context: Context): Markwon {
    return Markwon.builder(context)
        .usePlugin(CorePlugin.create())
        .usePlugin(StrikethroughPlugin.create())
        .usePlugin(TablePlugin.create(context))
        .usePlugin(HtmlPlugin.create())
        .usePlugin(CoilImagesPlugin.create(context))
        .usePlugin(LinkifyPlugin.create())
        .apply {
            // –î–æ–±–∞–≤–ª—è–µ–º CheckboxPreProcessor —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã TODO
            val viewModel = context.findActivity()?.let { 
                ViewModelProvider(it)[MainViewModel::class.java] 
            }
            if (viewModel?.isTodoEnabled?.value == true) {
                usePlugin(CheckboxPreProcessor())
            }
        }
        .build()
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Activity –∏–∑ Context
private fun Context.findActivity(): ComponentActivity? {
    var context = this
    while (context is ContextWrapper) {
        if (context is ComponentActivity) return context
        context = context.baseContext
    }
    return null
} 